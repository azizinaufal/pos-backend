// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id  Int @id @default(autoincrement())
  name  String
  email String
  password String
  created_at DateTime @default(now())
  updated_at  DateTime  @updatedAt
  carts Cart[]
  transactions  Transaction[]
  products Product[]
  categories  Category[]
  customers Customer[]
  profits Profit[]
  suppliers Supplier[]
  debits Debit[]

  @@map("users")
}

model Category{
  id Int @id @default(autoincrement())
  user_id Int
  image String?
  name String
  description String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  products Product[]
  user  User  @relation(fields: [user_id], references: [id],onDelete: Cascade)

  @@map("categories")
}

model Product{
  id Int @id @default(autoincrement())
  user_id Int
  category_id Int
  image String?
  barcode String @unique
  title String
  description String
  buy_price Float
  sell_price Float
  stock Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  category Category @relation(fields: [category_id], references: [id],onDelete: Cascade)
  transaction_details TransactionDetail[]
  carts Cart[]
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  debit_details DebitDetail[]

  @@map("products")
}

model Cart{
  id Int @id @default(autoincrement())
  cashier_id Int
  product_id Int
  qty Int
  price Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  cashier User @relation(fields: [cashier_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id],onDelete: Cascade)

  @@map("carts")
}

model Transaction{
  id Int @id @default(autoincrement())
  cashier_id Int
  customer_id Int?
  invoice String
  cash Float
  change Float
  discount Float?
  grand_total Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  cashier User  @relation(fields: [cashier_id],references: [id],onDelete:Cascade)
  customer Customer? @relation(fields: [customer_id],references: [id],onDelete: Cascade)
  transaction_details TransactionDetail[]
  profits Profit[]

  @@map("transactions")
}

model TransactionDetail{
  id Int @id @default(autoincrement())
  transaction_id Int
  product_id Int
  qty Int
  price Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  transaction Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id],references: [id], onDelete: Cascade)

  @@map("transaction_details")
}

model Customer{
  id Int @id @default(autoincrement())
  user_id Int
  name String
  no_telp String
  address String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  transactions Transaction[]
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("customers")
}



model Profit {
  id Int @id @default(autoincrement())
  transaction_id Int
  total Int
  user_id Int
  created_at DateTime @default(now())
  transaction Transaction @relation(fields: [transaction_id],references: [id],onDelete: Cascade)
  cashier User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("profits")
}

model Supplier{
  id  Int @id @default(autoincrement())
  user_id Int
  name String
  no_telp String
  address String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [user_id],references: [id], onDelete: Cascade)
  debits Debit[]

  @@map("suppliers")
}

model Debit{
  id Int @id @default(autoincrement())
  user_id Int
  supplier_id Int
  invoice String
  grand_total Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  supplier Supplier @relation(fields: [supplier_id], references: [id], onDelete: Cascade)
  debit_details DebitDetail[]

  @@map("debits")
}

model DebitDetail{
  id Int @id  @default(autoincrement())
  debit_id Int
  product_id Int
  qty Int
  price Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  debit Debit @relation(fields: [debit_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("debit_details")
}
